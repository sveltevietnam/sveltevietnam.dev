/* FIXME `:has` is enough, but Firefox has not yet added support for `:has`. When they do, please remove `.c-btn--with-icon` site-wide */
@custom-selector :--with-icon :has(:is(img, svg)), .c-btn--with-icon;
@custom-selector :--default :not(.c-btn--outlined, .c-btn--text), .c-btn--default;
@custom-selector :--text .c-btn--text;
@custom-selector :--outlined .c-btn--outlined;
@custom-selector :--loading [data-loading]:not([data-loading='false']);
@custom-selector :--disabled [disabled]:not([disabled='false']);

.c-btn {
	display: grid;
	column-gap: 8px;
	align-items: center;
	justify-content: center;

	min-height: 40px;
	padding: 8px 16px;

	border-radius: 4px;

	&:where(:--with-icon) {
		grid-template-columns: auto auto;
	}

	&:where(:not(:--with-icon)) {
		text-align: center;
	}

	&:where(:--default) {
		color: theme('colors.bg.DEFAULT');
		white-space: nowrap;
		background-color: theme('colors.fg.DEFAULT');
		transition: background-color 250ms theme('transitionTimingFunction.DEFAULT');

		/* TODO: Need to discuss about interaction styling */
		&:hover:not(:--disabled) {
			background-color: theme('colors.fg.100');
		}

		&:--disabled {
			color: theme('colors.white');
			background-color: theme('colors.neutral.500');
		}
	}

	&:where(:--outlined) {
		border: 1px solid theme('colors.fg.DEFAULT');
		transition: background-color 250ms theme('transitionTimingFunction.DEFAULT');

		&:hover:not(:--disabled) {
			background-color: theme('colors.outline.DEFAULT');
		}

		&:--disabled {
			color: theme('colors.white');
			background-color: theme('colors.neutral.500');
		}
	}

	&:where(:--text) {
		position: relative;
		padding: 0 0 4px;
		font-weight: 500;

		&::after {
			content: '';

			position: absolute;
			bottom: 0;
			left: 0;
			transform-origin: right center;
			transform: scaleX(0);

			display: block;

			width: 100%;
			height: 1px;

			background-color: theme('colors.outline.200');

			transition: transform 250ms theme('transitionTimingFunction.DEFAULT');
		}

		&:hover::after {
			transform-origin: left center;
			transform: scaleX(1);
		}
	}

	&:where(:not(:--text):--loading) {
		position: relative;
		overflow: hidden;

		&::before {
			content: '';
			position: absolute;
			inset: 0;
			backdrop-filter: blur(4px);
		}

		&::after {
			@apply c-loader;

			content: '';

			position: absolute;
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
		}
	}
}
