import fs from 'node:fs/promises';
import path from 'node:path';

import dedent from 'dedent';
import glob from 'tiny-glob';

const ts = dedent;

/**
 * @typedef Options
 * @property {string} indexKey - the key for the index route
 * @property {string} routingFilename - the name of the routing file
 * @property {string} routesPath - the path to the routes directory
 * @property {string} mapsOutdir - the output directory for the generated routing maps
 * @property {string} typesOutpath - the output path for the generated types
 **/

/**
 * @param {string} cwd - the current working directory
 * @param {Options} options - the current working directory
 */
async function build(cwd, options) {
	const { indexKey, routingFilename, routesPath, mapsOutdir, typesOutpath } = options;
	const pattern = path.posix.join(routesPath, '**', routingFilename);

	console.log('[sveltekit-routing] building routing maps...');
	let routingFilePaths = await glob(pattern, { cwd });
	if (process.platform === 'win32') {
		routingFilePaths = routingFilePaths.map((p) => p.replaceAll(path.win32.sep, path.posix.sep));
	}

	/** @type {Map<string, RoutingInput>} */
	const routes = new Map();

	/** @type {string[]} */
	const keys = [];
	for (const path of routingFilePaths) {
		const key =
			path
				.slice(routesPath.length, -routingFilename.length)
				// remove layout group (...)
				.replace(/\/\([^)]*\)/g, '')
				// replace [[param=...]] with :param
				.replace(/\[+(.*)[\]=]/g, (_, p1) => ':' + p1)
				.slice(1, -1) || indexKey;

		keys.push(key);

		const routing = /** @type {RoutingInput} */ (JSON.parse(await fs.readFile(path, 'utf-8')));
		routes.set(key, routing);
	}

	/** @type {Record<string, RoutingOutput>}*/
	const viMap = {};
	/** @type {Record<string, RoutingOutput>}*/
	const enMap = {};
	/** @type {RerouteConfig}*/
	const rerouteConfig = {
		staticViToEn: {},
		dynamicViToEn: {},
		mismatchedPaths: [],
	};

	for (const [key, route] of routes.entries()) {
		const segments = key.split('/').slice(0, -1);
		let delocalizedViPath = '';
		let delocalizedEnPath = '';

		if (key !== 'home') {
			for (let i = 0; i < segments.length; i++) {
				const segment = segments.slice(0, i + 1).join('/');
				const route = routes.get(segment);
				if (!route) throw new Error(`No routing.json is defined for ${segment}`);

				delocalizedViPath +=
					'/' + (typeof route.pathSegment === 'string' ? route.pathSegment : route.pathSegment.vi);
				delocalizedEnPath +=
					'/' + (typeof route.pathSegment === 'string' ? route.pathSegment : route.pathSegment.en);
			}

			delocalizedViPath +=
				'/' + (typeof route.pathSegment === 'string' ? route.pathSegment : route.pathSegment.vi);
			delocalizedEnPath +=
				'/' + (typeof route.pathSegment === 'string' ? route.pathSegment : route.pathSegment.en);
		}

		viMap[key] = {
			path: '/vi' + delocalizedViPath,
			name: typeof route.name === 'string' ? route.name : route.name.vi,
		};
		enMap[key] = {
			path: '/en' + delocalizedEnPath,
			name: typeof route.name === 'string' ? route.name : route.name.en,
		};

		if (delocalizedViPath !== delocalizedEnPath) {
			if (delocalizedViPath.includes(':')) {
				rerouteConfig.dynamicViToEn[delocalizedViPath] = delocalizedEnPath;
			} else {
				rerouteConfig.staticViToEn[delocalizedViPath] = delocalizedEnPath;
				rerouteConfig.mismatchedPaths.push('/vi' + delocalizedEnPath);
			}
		}
	}

	const source = ts`
		// DO NOT EDIT! This file is generated by vite-plugin-sveltekit-routing

		declare namespace App {
			export type RouteKey = ${keys.map((key) => `'${key}'`).join(' | ')};
			export type Route = {
				path: string;
				name: string;
			};
		}
	`;

	await fs.mkdir(path.join(cwd, mapsOutdir), { recursive: true });
	await Promise.all([
		fs.writeFile(path.join(cwd, mapsOutdir, 'vi.json'), JSON.stringify(viMap, null, 2)),
		fs.writeFile(path.join(cwd, mapsOutdir, 'en.json'), JSON.stringify(enMap, null, 2)),
		fs.writeFile(
			path.join(cwd, mapsOutdir, 'reroute-config.json'),
			JSON.stringify(rerouteConfig, null, 2),
		),
		fs.writeFile(path.join(cwd, typesOutpath), source),
	]);
}

/**
 *	@typedef RoutingInput
 *	@property {string | Record<import('@sveltevietnam/i18n').Language, string>} pathSegment
 *	@property {string | Record<import('@sveltevietnam/i18n').Language, string>} name
 */

/**
 * @typedef RoutingOutput
 * @property {string} path
 * @property {string} name
 */

/**
 * @typedef RerouteConfig
 * @property {Record<string, string>} staticViToEn
 * @property {Record<string, string>} dynamicViToEn
 * @property {string[]} mismatchedPaths
 */

/**
 * @returns {import('vite').Plugin}
 */
export function sveltekitRouting() {
	/** @type {Options} */
	const options = {
		indexKey: 'home',
		routingFilename: '_page/routing.json',
		routesPath: 'src/routes',
		mapsOutdir: 'src/data/routing/generated',
		typesOutpath: 'src/routing.generated.d.ts',
	};
	let cwd = process.cwd();

	return {
		name: 'sveltekit-routing',
		enforce: 'pre',
		options() {
			cwd = process.cwd();
		},
		// async configureServer(server) {
		// 	// server.watcher.add(path.join(root, pattern));
		// 	// server.watcher.on('add', build);
		// 	// server.watcher.on('change', build);
		// },
		async buildStart() {
			await build(cwd, options);
		},
	};
}
