name: Deploy @services/discord

on:
  # push:
  #   branches:
  #     - production
  workflow_dispatch:

jobs:
  pre_jobs:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
      paths_result: ${{ steps.skip_check.outputs.paths_result }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          skip_after_successful_duplicate: 'true'
          do_not_skip: '["workflow_dispatch"]'
          paths_filter: |
            discord:
              paths_ignore:
                - 'services/discord/README.md'
              paths:
                - 'services/discord/**'
  discord:
    needs: pre_jobs
    if: needs.pre_jobs.outputs.should_skip != 'true' || (needs.pre_jobs.outputs.paths_result && !fromJSON(needs.pre_jobs.outputs.paths_result).discord.should_skip)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Get pnpm cache
        uses: actions/cache@v3
        with:
          path: '${{ env.STORE_PATH }}'
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --ignore-scripts
        continue-on-error: false

      - name: Setup Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Fly.io
        run: "flyctl deploy . --dockerfile services/discord/Dockerfile --config services/discord/fly.toml --ha=false --remote-only"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
