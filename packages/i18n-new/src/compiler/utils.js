import ts, { factory } from 'typescript';

export const GENERATED_MARKER = 'DO NOT EDIT! This file is generated by @sveltevietnam/i18n';

/**
 * @param {import('../parser').SourceMessage} message
 * @returns {import('../runtime').MessageType}
 */
export function getSourceMessageType(message) {
	if (message.params.length) return 'with-params';
	return 'simple';
}

/**
 * @param {string} key
 * @returns {string}
 */
export function getIdFromMessageKey(key) {
	// avoiding conflict with reserved keywords,
	// just adding _ until there is a reliable upstream list
	// of all reserved keywords
	// @see https://github.com/microsoft/TypeScript/issues/2536
	return (
		'_' +
		key
			// key already containing _ should be escaped to avoid conflict
			// for example: `pages.write.title`, and `pages_write.title` will otherwise resolve to same id
			.replace(/_/g, '__')
			.replace(/\./g, '_')
	);
}

export const newline = () => factory.createIdentifier('\n');

/**
 * @param {import('typescript').Node[]} nodes
 * @param {boolean} [note=true]
 * @returns {string}
 */
export function print(nodes, note = true) {
	/** @type {import('typescript').Node[]} */
	const headerNodes = [];
	if (note) {
		headerNodes.push(factory.createJSDocComment(GENERATED_MARKER, undefined), newline());
	}

	const printer = ts.createPrinter({ newLine: ts.NewLineKind.LineFeed });
	const resultFile = ts.createSourceFile(
		'temp.ts',
		'',
		ts.ScriptTarget.Latest,
		false,
		ts.ScriptKind.JS,
	);

	const code = printer.printList(
		ts.ListFormat.MultiLine,
		factory.createNodeArray([...headerNodes, ...nodes]),
		resultFile,
	);

	return code;
}

/**
 * @param {Record<string, string>} def
 * @returns {import('typescript').Node}
 */
export function exportIdentifiersAsLiterals(def) {
	return factory.createExportDeclaration(
		undefined,
		false,
		factory.createNamedExports(
			Object.entries(def).map(([identifier, literal]) =>
				factory.createExportSpecifier(
					false,
					factory.createIdentifier(identifier),
					factory.createStringLiteral(literal),
				),
			),
		),
		undefined,
		undefined,
	);
}

/**
 * @param {string[]} ids
 * @returns {import('typescript').Node[]}
 */
export function importFactories(ids) {
	return [
		factory.createImportDeclaration(
			undefined,
			factory.createImportClause(
				false,
				undefined,
				factory.createNamedImports(
					ids.map((id) =>
						factory.createImportSpecifier(false, undefined, factory.createIdentifier(id)),
					),
				),
			),
			factory.createStringLiteral('@sveltevietnam/i18n-new/factory'),
			undefined,
		),
	];
}
